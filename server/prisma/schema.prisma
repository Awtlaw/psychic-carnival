// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  DOCTOR
  PATIENT
}

enum AppointmentStatus {
  PENDING
  CANCELLED
  FULFILLED
}

enum Sex {
  M
  F
}

model Admin {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  phone    String
  fname    String
  lname    String
  pwd      String
  role     Role     @default(ADMIN)
  joinedAt DateTime @default(now())
}

model Doctor {
  id            Int          @id @default(autoincrement())
  email         String       @unique
  phone         String
  fname         String
  lname         String
  pwd           String
  role          Role         @default(DOCTOR)
  joinedAt      DateTime     @default(now())
  Report        Report?
  Appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  appointmentId Int?
}

model Patient {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  phone       String
  fname       String
  lname       String
  dob         DateTime
  sex         Sex
  proxy       Json
  address     String
  pwd         String
  role        Role         @default(PATIENT)
  joinedAt    DateTime     @default(now())
  Report      Report?
  Appointment Appointment?
}

model Report {
  id        Int      @id @default(autoincrement())
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId Int      @unique
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  doctorId  Int      @unique
  diagnosis String
  createdAt DateTime @default(now())
}

model Appointment {
  id        Int               @id @default(autoincrement())
  patient   Patient           @relation(fields: [patientId], references: [id])
  patientId Int               @unique
  status    AppointmentStatus @default(PENDING)
  message   String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  Doctor    Doctor[]
}
